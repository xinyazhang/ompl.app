/**
\page installation Installation

To compile OMPL and OMPL.app the following two packages are required: 
- <a href="http://www.boost.org">Boost</a> (version 1.42 or higher), 
- <a href="http://www.cmake.org">CMake</a> (version 2.8 or higher),
- <a href="http://www.python.org">Python</a> (including libraries and header files),
- <a href="http://www.riverbankcomputing.co.uk/software/pyqt/download">PyQt4</a> or <a href="http://www.pyside.org/">PySide</a> (which, in turn, require <a href="http://qt.nokia.com/downloads">Qt4</a>), and
- <a href="http://pyopengl.sourceforge.net/">PyOpenGL</a>.
.
For running the tests, you will also need <a href="http://code.google.com/p/googletest/">Google Test</a>. If you want to be able to regenerate the python bindings (which would be necessary if you change the C++ API), then you need to install <a href="http://www.language-binding.net/pyplusplus/pyplusplus.html">Py++</a>. To (re)generate this documentation you will need <a href="http://www.doxygen.org">Doxygen</a>.

Below are installation instructions for <a href="#install_linux">Linux</a>, <a href="#install_osx">OS X</a>, and <a href="#install_windows">Windows</a>.
<br>

\note If you are using <a href="http://code.ros.org">ROS</a>, please see the <a href="http://www.ros.org/wiki/ompl">OMPL package in ROS</a>.

\section install_linuxosx Installation on Linux and Mac OS X

Below are installation instructions for Ubuntu Linux and Mac OS X. Similar steps can be taken for other distributions, but package names may not be identical.

\subsection install_linux_ubuntu Ubuntu Linux
- If using Ubuntu 10.04 or earlier, the supplied Boost version is too old. You will need to add another repository. For Ubuntu 9.10 or 10.04, this can be done with the following command:
\code
sudo add-apt-repository ppa:gezakovacs/boost
\endcode
For ubuntu 9.04 or earlier, adding the repository will require a <a href="https://launchpad.net/~gezakovacs/+archive/boost">different approach</a>.
- If using Ubuntu 9.10 or earlier, the supplied version of CMake is too old. 
You can download the latest version from <a href="http://www.cmake.org/cmake/resources/software.html">here</a>.
- Install Boost 1.42, CMake 2.8, PyQt4, and PyOpenGL.
\code
sudo apt-get install libboost-all-dev cmake python-dev python-qt4-dev python-qt4-gl python-opengl freeglut3-dev
\endcode
- If the rendering in the OMPL.app GUI seems sluggish, you may want to install <a href="http://pypi.python.org/pypi/PyOpenGL-accelerate">PyOpenGL-accelerate</a> to enable OpenGL hardware acceleration.
- To be able to build tests and generate documentation, Google Test and Doxygen are also needed:
\code
sudo apt-get install libgtest-dev doxygen
\endcode
- To be able to generate Python bindings, follow \ref installPyPlusPlus "these" instructions.
- Follow the common steps \ref common_steps "below".


\subsection install_mac_os Mac OS X

- It is easiest to install the dependencies through <a href="http://www.macports.org">MacPorts</a>, a package manager for OS X, so install MacPorts first.
- If you do not need to modify or see the source code of OMPL.app, then the easiest way to install OMPL.app is with the MacPorts \c port command:
\code
sudo port selfupdate
sudo port install ompl +app
\endcode
This is it. You are done. It will take quite a while, though, to download, build, and install OMPL.app and all its dependencies.
- If you downloaded the source distribution of OMPL.app, install the dependencies Boost, CMake, assimp, PyQt4, PyOpenGL, and Py++. If you have MacPorts installed, type the following:
\code
sudo port selfupdate
sudo port install cmake assimp pqp py26-pyqt4 py26-opengl py26-pyplusplus-devel boost +python26
\endcode
If you omit the \c +python26 part, Boost.Python will not be installed, and the Python bindings for OMPL cannot be compiled. Since MacPorts compiles everything from source, the commands above can take quite a while to complete. It is recommended to let this running overnight.
- It is <b>very</b> important that you use the same installed version of Python for all dependencies and OMPL.app. If you are using MacPorts, then you <b>must</b> use the MacPorts version of python 2.6 (most likely installed in <tt>/opt/local/bin</tt>). To make this version the default python version, make sure <tt>/opt/local/bin</tt> appears before <tt>/usr/bin</tt> in your PATH. You can add a line like this to your <tt>${HOME}/.bash_profile</tt>:
\code
export PATH=/opt/local/bin:/opt/local/sbin:$PATH
\endcode
Next, execute the following commands:
\code
sudo port install python_select
sudo python_select python26
\endcode
You can check if the MacPorts-installed python 2.6 is the default one by typing the following command:
\code
ls -l `which python`
\endcode
- To be able to build tests and generate documentation, Google Test and Doxygen are also needed:
\code
sudo port install google-test doxygen
\endcode
- Follow the common steps \ref common_steps "below".

\subsection common_steps Common steps
- Create a build directory and run cmake:
\code
cd omplapp
mkdir -p build/Release
cd build/Release
cmake -DCMAKE_BUILD_TYPE=Release ../.. [-DCMAKE_INSTALL_PREFIX=/path/to/install]
\endcode
If you want a debug version of OMPL.app, change "Release" to "Debug" above.
- Type <tt>make update_bindings</tt>. This will generate C++ code that in the next step will be compiled as binary Python modules. <b>Note:</b> <tt>make update_bindings</tt> is <i>never</i> run automatically. If you change any of the OMPL header files, you need to type <tt>make update_bindings</tt> again for the changes to be reflected in the Python modules. The command <tt>make</tt> needs to be executed <b>after</b> every call to <tt>make update_bindings</tt>.
- Compile OMPL.app by typing \c make.
- Optionally, run the test programs by typing <tt>make test</tt>.
- Optionally, generate documentation by typing <tt>make doc</tt>.
- If you need to install the library, you can type <tt>make install</tt>. The install location is specified by <tt>CMAKE_INSTALL_PREFIX</tt>.
.


\section install_windows Installation on Windows

- Download and install the dependencies listed above. For most dependencies, you can get a precompiled version. If you plan to use Microsoft Visual Studio, you can download Boost <a href="http://www.boostpro.com/download/">here</a>. If you want to use MinGW or Cygwin, follow the <a href="http://www.boost.org/doc/libs/1_44_0/more/getting_started/unix-variants.html">Unix installation instructions</a>.
- Run CMake (either the GUI or the command line version). From the GUI it is easy to generate project files for Visual Studio or Makefiles.
- Build the "solution" ALL in Visual Studio, or run \c make if you use MinGW/Cygwin.
.

*/
