/**
\page installation Installation

\htmlonly
<span class="dlbutton"><a href="download.html">Download</a></span> the latest release of OMPL.
<br>\endhtmlonly
To compile OMPL and OMPL-app the following two packages are required: 
- <a href="http://www.boost.org">Boost</a> (any recent version), 
- <a href="http://www.cmake.org">CMake</a> (version 2.8 or higher),
- <a href="http://www.python.org">Python</a> (including libraries and header files),
- <a href="http://www.riverbankcomputing.co.uk/software/pyqt/download">PyQt4</a> or <a href="http://www.pyside.org/">PySide</a> (which, in turn, require <a href="http://qt.nokia.com/downloads">Qt4</a>), and
- <a href="http://pyopengl.sourceforge.net/">PyOpenGL</a>.
.
For running the tests, you will also need <a href="http://code.google.com/p/googletest/">GTest</a>. If you want to be able to regenerate the python bindings (which would be necessary if you change the C++ API), then you need to install <a href="http://www.language-binding.net/pyplusplus/pyplusplus.html">Py++</a> (which, in turn, requires pygccxml and GCC-XML). We use the versions of Py++, pygccxml, and GCC-XML that are taken directly from their respective repositories, but official releases may work as well. To generate the documentation you will need <a href="http://www.doxygen.org">Doxygen</a>.

Below are installation instructions for <a href="#install_linux">Linux</a>, <a href="#install_osx">OS X</a>, and <a href="#install_windows">Windows</a>.
<br>

\note If you are using <a href="http://code.ros.org">ROS</a>, please see the <a href="http://www.ros.org/wiki/ompl">OMPL package in ROS</a>.

\section install_linux Installation on Linux

- Install Boost, CMake, and (optionally) GTest and the Python libraries and headers. For example, with an Ubuntu 10.04 Linux distribution, you can type:
\code
# required 
sudo apt-get install cmake libboost-thread1.40-dev \
     libboost-date-time1.40-dev libboost-math1.40-dev \
     < fill in names of other packages >
# optional
sudo apt-get install doxygen python-dev libgtest-dev \
     libboost-system1.40-dev libboost-filesystem1.40-dev
\endcode

The needed boost libraries are: thread, date_time, math. The optional ones are: system, filesystem.

- Create a build directory and run cmake:
\code
cd omplapp
mkdir -p build/Release
cd build/Release
cmake -DCMAKE_BUILD_TYPE=Release ../.. [-DCMAKE_INSTALL_PREFIX=/path/to/install]
\endcode
If you want a debug version of ompl, change "Release" to "Debug" above.
- Compile OMPL by typing \c make.
- Optionally, run the test programs by typing <tt>make test</tt>.
- If you want to install the library, you can type <tt>make install</tt>. The install location is specified by <tt>CMAKE_INSTALL_PREFIX</tt>.

\section install_osx Installation on OS X

- It is easiest to install the dependencies through <a href="http://www.macports.org">MacPorts</a>, a package manager for OS X, so install MacPorts first.
- Install Boost, CMake, and the Python libraries and headers. If you have MacPorts installed, type the following:
\code
sudo port selfupdate
sudo port install cmake py26-pyqt4 py26-opengl boost +python26
\endcode
If you omit the \c +python26 part, Boost.Python will not be installed, and the Python bindings for OMPL cannot be compiled. Since MacPorts compiles everything from source, the above two commands can take quite a while to complete. It is recommended to let this running overnight.
- Create a build directory and run cmake:
\code
cd omplapp
mkdir -p build/Release
cd build/Release
cmake -DCMAKE_BUILD_TYPE=Release ../..
\endcode
If you want a debug version of ompl, change "Release" to "Debug" above.
- Compile OMPL by typing \c make.
- Optionally, run the test programs by typing <tt>make test</tt>.
.

\section install_windows Installation on Windows

- Download and install the dependencies listed above. For most dependencies, you can get a precompiled version. If you plan to use Microsoft Visual Studio, you can download Boost <a href="http://www.boostpro.com/download/">here</a>. If you want to use MinGW or Cygwin, follow the <a href="http://www.boost.org/doc/libs/1_43_0/more/getting_started/unix-variants.html">Unix installation instructions</a>.
- Run CMake (either the GUI or the command line version). From the GUI it is easy to generate project files for Visual Studio or Makefiles.
- Build the "solution" ALL in Visual Studio, or run \c make if you use MinGW/Cygwin.
.

*/
