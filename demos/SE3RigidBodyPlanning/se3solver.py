#!/usr/bin/env python3

import argparse
from six.moves import configparser
import numpy as np
import sys
from os.path import abspath, dirname, join

sys.path.insert(0, './lib') # FIXME: a more portable solution
import pyse3ompl as plan

def read_xyz(config, section, prefix):
    ret = np.zeros(shape=(3), dtype=np.float64)
    for i,suffix in enumerate(['x','y','z']):
        ret[i] = config.getfloat(section, prefix + '.' + suffix)
    return ret

def solve(args):
    puzzle_dir = dirname(args.puzzle)
    config = configparser.ConfigParser()
    config.read([args.puzzle])
    env_fn = join(puzzle_dir, config.get("problem", "world"))
    rob_fn = join(puzzle_dir, config.get("problem", "robot"))
    driver = plan.OmplDriver()
    driver.set_planner(args.planner, args.sampler, args.saminj, args.rdt_k)
    driver.set_model_file(plan.MODEL_PART_ENV, env_fn)
    driver.set_model_file(plan.MODEL_PART_ROB, rob_fn)
    for i,prefix in zip([plan.INIT_STATE, plan.GOAL_STATE], ['start', 'goal']):
        tr = read_xyz(config, 'problem', prefix)
        rot_axis = read_xyz(config, 'problem', prefix + '.axis')
        rot_angle  = config.getfloat('problem', prefix + '.theta')
        driver.set_state(i, tr, rot_axis, rot_angle)
    lo = read_xyz(config, 'problem', 'volume.min')
    hi = read_xyz(config, 'problem', 'volume.max')
    driver.set_bb(lo, hi)
    driver.set_cdres(args.cdres)
    driver.solve(args.days, args.out)

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('puzzle', help='Configure file generated by OMPL GUI')
    parser.add_argument('planner', help='Choose a planner', choices=range(17), type=int)
    parser.add_argument('days', help='Time limit in day(s)', type=float)
    parser.add_argument('--out', help='Output complete planning data', default='')
    parser.add_argument('--sampler', help='Valid state sampler', type=int, default=0)
    parser.add_argument('--saminj', help='Sample injection file', type=str, default='')
    parser.add_argument('--rdt_k', help='K Nearest in RDT algorithm', type=int, default=1)
    parser.add_argument('--cdres', help='Collision detection resolution', type=float, default=0.005)
    args = parser.parse_args()

    solve(args)

if __name__ == '__main__':
    main()
