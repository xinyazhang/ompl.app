/**
\page documentation Documentation

\section gettingStarted Getting Started

- Follow the instructions to \ref download "download" and \ref installation "install" OMPL.app.
- Learn how to use the \ref gui "OMPL.app GUI".
- Read the \ref api_overview "API overview".
- Learn how to integrate your own code with \ref buildSystem "OMPL's build system".
- Read about the \ref availablePlanners "available planners" and the \ref availableManifolds "available manifolds".
- If interested in using Python, make sure to read \ref python "the documentation for the python bindings".
- Check the \ref FAQ "answers to Frequently Asked Questions".
- Get more information about \ref education "using OMPL for educational purposes".
.

\section tutorials Tutorials

Below we include a number of tutorials we believe are useful for
understanding how OMPL works, grouped by level of difficulty. Users
are encouraged to look at the examples in @b demos/ as well.

\par Beginner
- \ref geometricPlanningSE3 "Geometric planning for a rigid body in 3D"
- \ref stateValidation "Setting up state validity checking"
- \ref workingWithStates "Working with states"
.

\par Intermediate
- \ref genericPlanning "Generic instructions for setting up a planning context"
- \ref implementingStateManifolds "Implementing manifolds"
- \ref goalRepresentation "Representing goals"
.

\par Advanced
- \ref benchmark "Benchmarking planners"
- \ref newPlanner "Adding a new planner"
- \ref projections "Setting up a projection"
.

\section demos Demos

- <a href="ompl_2demos_2RigidBodyPlanning_8cpp_source.html"><strong>Rigid body planning</strong></a> <a href="RigidBodyPlanning_8py_source.html"><strong>[Python version]</strong></a>.
This demo is essentially the same example described in the first tutorial. It illustrates how to use the main classes.
- <a href="RigidBodyPlanningWithControls_8cpp_source.html"><strong>Rigid body planning with controls</strong></a> <a href="RigidBodyPlanningWithControls_8py_source.html"><strong>[Python version]</strong></a>.
This demo shows how to perform kinodynamic planning for a simple car-like vehicle.
- <a href="RigidBodyPlanningWithIntegrationAndControls_8cpp_source.html"><strong>Rigid body planning with integration and controls. </strong></a>
This example extends the previous example by showing how one can plan for systems of ordinary differential equations in a generic way. This example uses simple Euler integration. For higher accuracy it is recommended to use higher-order methods. Other libraries such as the <a href="http://www.gnu.org/software/gsl/">GNU Scientific Library</a> or <a href="https://svn.boost.org/trac/boost/wiki/LibrariesUnderConstruction#Boost.Numeric.Odeint">Boost.Numeric.Odeint</a> can be used for this purpose.
- <a href="RigidBodyPlanningWithIK_8cpp_source.html"><strong>Rigid body planning with an Inverse Kinematics solver generating goal states in a separate thread. </strong></a>
This demo shows off two neat features of OMPL: a genetic algorithm-based Inverse Kinematics solver and a lazy goal state sampler. In a separate thread goal states are computed by the IK solver. While solving a motion planning problem, the planning algorithms select a random goal state from the ones computed so far.
- <a href="ODERigidBodyPlanning_8cpp_source.html"><strong>Rigid body planning using the Open Dynamics Engine (ODE). </strong></a>
When ODE is installed, OMPL will compile an extension that makes is easier to use ODE as an integrator for kinodynamic systems. In this example, a box is pushed around in the plane from a start position to a goal position.

*/
